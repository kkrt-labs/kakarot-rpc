---
name: deno test

on:
  workflow_call:

jobs:
  formatting:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: indexer
      - uses: denoland/setup-deno@v1
        with:
          deno-version: vx.x.x
      - name: Run formatting
        run: deno fmt --check indexer/

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      # Checkout target branch and run tests
      - name: Install lcov
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov
      - name: Run Tests with Coverage on target branch
        run: |
          KAKAROT_ADDRESS=0x1 deno test --allow-env --coverage=cov_profile_1 --ignore=indexer/src/transform.test.ts,indexer/src/testnetData.test.ts
          deno coverage cov_profile_1 --lcov > cov_profile_1.lcov
          DEFAULT_BLOCK_GAS_LIMIT=7000000 STARKNET_NETWORK=http://0.0.0.0:1010 KAKAROT_ADDRESS=0x11c5faab8a76b3caff6e243b8d13059a7fb723a0ca12bbaadde95fb9e501bda deno test --allow-env --coverage=cov_profile_2 --allow-net indexer/src/transform.test.ts indexer/src/testnetData.test.ts
          deno coverage cov_profile_2 --lcov > cov_profile_2.lcov
      - name: Combine coverage profiles on target branch
        run: |
          lcov --add-tracefile cov_profile_1.lcov --add-tracefile cov_profile_2.lcov --output-file total_coverage.lcov
      - name: Extract coverage percentage from HTML for the target branch
        run: |
          genhtml -o cov_profile/html total_coverage.lcov
          cat cov_profile/html/index.html
          coverage_percentage=$(grep -A 3 'Functions:' cov_profile/html/index.html| awk 'NR==4' | grep -o '[0-9]\+\.[0-9]\+')
          coverage_percentage=${coverage_percentage%\%}
          echo $coverage_percentage
          echo $coverage_percentage > curr_coverage_percentage.txt
      # Checkout base branch and run tests
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          clean: false
      - name: Run Tests with Coverage on base branch
        run: |
          KAKAROT_ADDRESS=0x1 deno test --allow-env --coverage=cov_profile_1 --ignore=indexer/src/transform.test.ts,indexer/src/testnetData.test.ts
          deno coverage cov_profile_1 --lcov > cov_profile_1.lcov
          DEFAULT_BLOCK_GAS_LIMIT=7000000 STARKNET_NETWORK=http://0.0.0.0:1010 KAKAROT_ADDRESS=0x11c5faab8a76b3caff6e243b8d13059a7fb723a0ca12bbaadde95fb9e501bda deno test --allow-env --coverage=cov_profile_2 --allow-net indexer/src/transform.test.ts indexer/src/testnetData.test.ts
          deno coverage cov_profile_2 --lcov > cov_profile_2.lcov
      - name: Combine coverage profiles on base branch
        run: |
            lcov --add-tracefile cov_profile_1.lcov --add-tracefile cov_profile_2.lcov --output-file total_coverage.lcov
      - name: Extract coverage percentage from HTML for the base branch
        run: |
          genhtml -o cov_profile/html total_coverage.lcov
          cat cov_profile/html/index.html
          coverage_percentage_main=$(grep -A 3 'Functions:' cov_profile/html/index.html| awk 'NR==4' | grep -o '[0-9]\+\.[0-9]\+')
          coverage_percentage_main=${coverage_percentage_main%\%}
          echo $coverage_percentage_main
          echo $coverage_percentage_main > coverage_percentage_main.txt
      - name: Compare coverage percentage
        run: |
          previous_coverage=$(cat coverage_percentage_main.txt)
          echo "Previous coverage percentage was $previous_coverage%"
          current_coverage=$(cat curr_coverage_percentage.txt)
          echo "Current coverage percentage is $current_coverage%"
          change=$(echo "$previous_coverage - $current_coverage" | bc)
          echo "Coverage change is $change%"
          if (( $(echo "$change > 5.0" | bc -l) )); then
            echo "Coverage dropped by more than 5%!"
            exit 1
          fi
